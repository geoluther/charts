#! /usr/bin/python
## assumes CSV file will have counts of plays, structure like:
## Plays, `AlbumTitle`,`TrackTitle`, `TrackArtist`, `Artist`, `AddDate`, `AlbumId`,`Genre`

## use: charts_withcounts.py <infile.csv>
## writes to: "Charts_YYYY-MM-DD.xlsx"
## update this or add argv functionality?
## infile should be a CSV with columns defined as the columns var above
## csv should have a counts column, generated by mySQL queery.

## how to make better:
## run on server, include DB call
## run on server as call that returns a download

import csv
import sys

from openpyxl import Workbook
from openpyxl.styles import Font
from datetime import date

# for reference
columns = ['Plays', 'AlbumTitle','TrackTitle', 'TrackArtist', 'Artist', 'AddDate', 'AlbumId','Genre']

genres = [  "Unknown", "Bluegrass", "Blues", "Cajun", "Celtic", "Classical", "Country", "Folk",
            "Gospel", "Hip Hop", "International", "Jazz", "Lounge-Schlock", "Modern",
            "R & B", "Ragtime", "Rap", "Reggae", "Rock", "Soundtrack", "Space", "Spoken Word",
			"Techno", "Zydeco" ]


infile = sys.argv[1]
print "Reading: ", infile

# infile = "SoundExchangePlaylist_033117_names.csv"


wb = Workbook()
d = date.today()
dest_filename = 'Charts_{}.xlsx'.format(d)

sheets = [ wb.create_sheet(title=g) for g in genres ]

## remove the default sheet
wb.remove_sheet( wb['Sheet'] )

## write headers to sheets
header = ['Plays', 'Artist', 'Track','Album', 'Add Date', 'Album Id','Genre']

ft = Font(bold=True)


for g in genres:
	ws = wb[g]
	ws.append(header)


with open(infile, 'rb') as f:
	x = 0
	reader = csv.DictReader(f)

	for row in reader:
		x += 1

		# merge Artist, TrackArtist
		artist = row['TrackArtist'] + row['Artist']
		artist = artist.replace("NULL","")

		# build data row, convert plays and ID from string to int.
		# should be same order as header
		data = [ int(row['Plays']), artist, row['TrackTitle'], row['AlbumTitle'],
		row['AddDate'], int(row['AlbumId']), row['Genre'] ]

		genre = row["Genre"]

		if genre not in genres:
			genre = "Unknown"

		wb[genre].append(data)

print "rows read >> ", x
print "writing to >> ", dest_filename

# freeze header row, try to add bold style
for g in genres:
	ws = wb[g]
	c = ws['A2']
	ws.freeze_panes = c
	row = ws.row_dimensions[1]
	row.font = Font(bold=True) # not working

wb.save(filename = dest_filename)


## sql query to generate csv

# query = """SELECT Count(*) as Plays, AlbumTitle, TrackTitle, TrackArtist, Artist, AddDate, AlbumId, Genre
# FROM SoundExchangePlaylist
# WHERE StartDateTime between '2017-02-28 00:00:01' and NOW()
# GROUP BY TrackTitle, AlbumTitle
# ORDER BY Plays DESC;"""

